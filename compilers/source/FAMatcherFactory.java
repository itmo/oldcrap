import java.util.*;
import java.io.*;
import jasmin.ClassFile;
/**
 *	this factory generates new Matcher implementations based on
 *	Finite Automata. It will first determinize the automaton if 
 *	it happens to be non-deterministic. then it will generate 
 *	a while loop switch-case combination to handle all the 
 *	states for the automaton. 
 */
public class FAMatcherFactory 
{
	protected int seed=0;
	public Matcher generate(FA fa)
	throws IOException
	{
		try{
			assert(fa!=null);
			//System.out.println(fa);
			if(!fa.isDeterministic())
			{
				fa=fa.determinize();
				//System.out.println(fa);
			}
			//TBD generate code 
			String className;
			synchronized(this)
			{
				/*	lets assume that nobody else uses that prefix..*/
				className="FAMatcherFactorygen"+seed;
				seed++;
			}
			String code=new SpaghettiGenerator().generate(fa,className);
			//System.out.println(code);
			//return new Temp(); //dummy automaton for aa* 
			ClassFile clFile=new ClassFile();
			clFile.readJasmin(
					new StringReader(code),
					className,
					true
					);
			ByteArrayOutputStream bos=
				new ByteArrayOutputStream();
			clFile.write(bos);
			byte[] bc=bos.toByteArray();
			Class clz=new ExClassLoader().ddefineClass(
						(String)null,
						bc,
						0,
						bc.length);
			return (Matcher)clz.newInstance();
		}catch(IOException ioe){
			throw ioe;
		}catch(Throwable t)
		{
			IOException ioe=new IOException("class construction failed");
			ioe.initCause(t);
			throw ioe;
		}
	}
}
class ExClassLoader
extends ClassLoader
{
	public Class<?> ddefineClass(String name,byte[] bc,int off,int len)
	{
		return defineClass(name,bc,off,len);
	}
}

/**
 *	generates jasmin code for a spaghetti-style implementation of 
 *	a DFA. 
 */
class SpaghettiGenerator
{
	public String generate(FA fa,String className)
	{
		assert(fa.isDeterministic());
		String ret="";
		ret+=generateHeader(className);
		ret+=generateSpaghetti(fa);
		ret+=generateFooter();
		
		return ret;
	}
	protected String generateHeader(String name)
	{
		String ret=
			//	class header& constructor
			".source Autogenerated\n"+
			".class public "+name+"\n"+
			".super java/lang/Object\n"+
			".implements Matcher\n"+
			"\n"+
			".method public <init>()V\n"+
			"aload_0\n"+
			"invokenonvirtual java/lang/Object/<init>()V\n"+
			"return\n"+
			".end method\n"+
			//	delegator
			".method public match(Ljava/lang/String;)Z\n"+
			".limit stack 4\n"+
			".limit locals 2\n"+
			"aload_0\n"+
			"aload_1\n"+
			"iconst_0\n"+
			"aload_1\n"+
			"invokevirtual java/lang/String/length()I\n"+
			"invokenonvirtual "+name+"/match(Ljava/lang/String;II)Z\n"+
			"\n"+
			"ireturn\n"+
			".end method\n"+
			//	start of the main method
			".method public match(Ljava/lang/String;II)Z\n"+
			//TBD assertions here..
			".limit stack 2\n"+
			".limit locals 6\n"+
			//this is in 0 
			"aload_1\n"+
			"astore_0\n"+ //move s to 0
			"iload_2\n"+  
			"istore_1\n"+//move text position to 1
			"iload_3\n"+ 
			"iload_1\n"+
			"iadd\n"+
			"istore_2\n"+ //move len to 2 and add pos to make end
			//s 0 ,pos 1 , end 2, char 3
			"goto Sstart\n"+ //go to start state
			"	;end header\n";
		return ret;
	}
	protected String generateSpaghetti(FA fa)
	{
	
		String ret="";
		String[] states=fa.getStates();
		for(int i=0;i<states.length;i++)
		{
			String state=states[i];
			ret+=
				"S"+state+":\n"+ //Sstart.
				"iload_1\n"+
				"iload_2\n"+   //pos>=end goto success or fail
				"if_icmpge "+(fa.isEndState(state)?"Success":"Fail")+"\n"+
				"aload_0\n"+
				"iload_1\n"+ //get s and pos & call charAt
				"invokevirtual java/lang/String/charAt(I)C\n"+
				"istore_3\n"+ //char to var3
				"iinc 1 1\n"; //pos++
			char[] input=fa.getCharacters(state);
			for(int j=0;j<input.length;j++)
			{
				String trans=fa.getTransition(state,input[j]);
				if(trans!=null)
				{
					ret+=
						"iload_3\n"+ //char to stack
						"ldc "+(int)input[j]+"\n"+//comparable
						"if_icmpeq S"+trans+"\n";
				}
			}
			ret+=
				"goto Fail\n";
			
			//make label S<statename>
			//check pos==len
				//if endstate accept, else fail
			
			//get char
			//store to var 3
			//iload from 3
			//pos++
			//for each transition
				//compare char to constant char
					//if equals goto S<deststate>
			//we come here if none matched
			//goto Fail
		}
		
		return ret;
	}
	protected String generateFooter()
	{
		String ret="";
		
		ret+="\t\t; footer start\n";
		ret+="LERROR:\t\t; error exit\n";
		ret+="\n";
		ret+="Fail:\t\t; failure exit\n";
		ret+="\ticonst_0\n";
		ret+="\tireturn\n";
		ret+="Success:\t\t; success exit\n";
		ret+="\ticonst_1\n";
		ret+="\tireturn\n";
		ret+=".end method\n";
		ret+="\t\t; footer end\n";
		return ret;
	}
}
