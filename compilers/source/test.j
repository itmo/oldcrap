;
;	macro "Temp" as classname. randomize something
;
;
.source Autogenerated
.class public Temp
.super java/lang/Object
.implements Matcher

;
;	cutpaste default constructor
;
.method public <init>()V
   aload_0
   invokenonvirtual java/lang/Object/<init>()V
   return
.end method



;
;	generated stub method for delegating to 
;	match(s) -> match(s,0,s.length())
;
;	public boolean match(String s);
;
.method public match(Ljava/lang/String;)Z
	.limit stack 4
	.limit locals 2
	aload_0 ; push this
	aload_1 ; push s 
	ldc 0   ; push 0 for off
	aload_1 ; push s 
	invokevirtual java/lang/String/length()I
	; now stack has len , 0 , s , this
	invokenonvirtual Temp/match(Ljava/lang/String;II)Z
	ireturn ; return a boolean..
.end method

;
;	the main generated method 
;	match(String s,int off,int len);
;
.method public match(Ljava/lang/String;II)Z
	.limit stack 2  ; make sure this is enough
	.limit locals 6 ; 
			;put string s to local var 5 for safekeeping
	aload_1
	astore 5
	;
	; init variables
	;
	iconst_0
	istore_1	; initialize state=0
			; text pos is already in 2 
			; len is already in 3, we just have to add pos to it 
			; calculate end of text pos+len
	iload_2
	iload_3
	iadd
	istore_3 
	;	this as variable 0 
	;	state as variable 1 
	;	text position as variable 2 
	;	end as variable 3 
	; 	char is var 4 or -1 for pos>=len
LoopStart:
	iload_2 	; pos to stack
	iload_3 	; end to stack
	if_icmplt CharsAvailable
			; oops. no more chars. set to -1 
	iconst_m1	; -1 to stack
	goto Continue 	; jump over "we have chars"
CharsAvailable: 	; oh , we still have chars
	aload 5 	; s to stack
	iload_2 	; pos to stack
	invokevirtual java/lang/String/charAt(I)C
Continue: 
			; now the char is in stack
	istore 4 	; store char to var 4
	iload 4 	; push char back to stack
	iload_1 	; load state to stack
	tableswitch 0   ; GENERATED STUFF STARTS
		S0	; GENERATE THESE
		S1
	default: LERROR
	
	;GENERATE THESE
	S0:  ; char a match,non ending
		iconst_m1
		if_icmpeq Fail		; ok. end of text -> Fail
		iload 4 		; char to stack
		sipush 0x61 		; push 'a'
		if_icmpne S0_a_next	; test 
					; ha! we have 'a'
			sipush 2	; limits us to 32k states unless adding is used
			istore_1	; state=2
			iinc 2 1	; pos++
			goto LoopStart	; next round
		S0_a_next:		; next char tested..if required
					; more char ifs if required
		
		goto Fail ; for all other chars
	S1: ; char a match to itself , ending state
		iconst_m1
		if_icmpeq Success	; ending state success
		iload 4 		; char to stack
		sipush 0x61		; push 'a'
		if_icmpne S1_a_next	; test
			goto LoopStart	; omit state setting since we are already in it
		S1_a_next:
		goto Fail
	LERROR: 		; should not happen
	pop 			; pop the char
Fail:
	iconst_0 	; return false
	ireturn  	; 
Success:
	iconst_1
	ireturn 	; return true
.end method
